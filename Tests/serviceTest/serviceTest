import sequelize from "../../src/config/db.js";
import Aula from "../../src/models/aula.js";
import {
  createAula,
  listAulas,
  getAulaById,
  updateAula,
  deleteAula,
} from "../../src/services/aulaService.js";

beforeAll(async () => {
  await sequelize.sync({ force: true });
});

afterAll(async () => {
  await sequelize.close();
});

let aulaId;

test("createAula crea correctamente un aula", async () => {
  const aula = await createAula({
    numero: 200,
    ubicacion: "Edificio B",
    capacidad: 30,
    computadoras: 5,
    tieneProyector: false,
  });

  aulaId = aula.id;

  expect(aula.id).toBeDefined();
  expect(aula.estado).toBe("disponible");
  expect(aula.numero).toBe(200);
});

test("listAulas devuelve aulas creadas", async () => {
  const data = await listAulas();
  expect(data.total).toBeGreaterThanOrEqual(1);
  expect(data.items[0]).toHaveProperty("numero");
});

test("getAulaById devuelve el aula por su id", async () => {
  const aula = await getAulaById(aulaId);
  expect(aula.id).toBe(aulaId);
  expect(aula.numero).toBe(200);
});

test("updateAula actualiza correctamente los campos", async () => {
  const aula = await updateAula(aulaId, {
    ubicacion: "Edificio C",
    capacidad: 35,
    tieneProyector: true,
  });

  expect(aula.ubicacion).toBe("Edificio C");
  expect(aula.capacidad).toBe(35);
  expect(aula.tieneProyector).toBe(true);
});

test("deleteAula elimina el aula", async () => {
  const res = await deleteAula(aulaId);
  expect(res.ok).toBe(true);

  const existe = await Aula.findByPk(aulaId);
  expect(existe).toBeNull();
});
